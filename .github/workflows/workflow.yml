# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request event but only for the "main" branch
  pull_request:
    branches: ["main"]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  conditional_job_check_files:
    runs-on: "ubuntu-latest"
    # Declare outputs for next jobs
    outputs:
      docs_changed: ${{ steps.check_file_changed.outputs.docs_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - shell: pwsh
        id: check_file_changed
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Check if a file under docs/ or with the .md extension has changed (added, modified, deleted)
          $SourceDiff = $diff | Where-Object { $_ -match '.md$' }
          $HasDiff = $SourceDiff.Length -gt 0

          # Set the output named "docs_changed"
          Write-Host "::set-output name=docs_changed::$HasDiff"

  # Run the job only with "docs_changed" equals "True"
  conditional_job:
    runs-on: "ubuntu-latest"
    needs: [conditional_job_check_files]
    if: needs.conditional_job_check_files.outputs.docs_changed == 'True'
    steps:
      - name: Bash script
        run: |
          firstline=$(sed '1q;d' README.md);
          secondline=$(sed '2q;d' README.md);
          firstLineLetter=${firstline%% *}
          secondLineLetter=${secondline%% *} 
          if [ "$firstLineLetter" == "title:" ]; then echo '::set-output name=titleResult::True' ; else echo '::set-output name=titleResult::False' ; fi;
          if [ "$secondLineLetter" == "description:" ]; then echo '::set-output name=desResult::True'; else echo '::set-output name=desResult::False'; fi;
          arr=();
          while IFS= read -r line; do arr+=(${#line}) ; done < README.md;
          echo ${arr[0]};
          if [[ $((${arr[0]} - 6)) -le 70 && $((${arr[0]} - 6)) -ge 50 ]]; then echo '::set-output name=titleLenGood::True'; else echo '::set-output name=titleLenGood::False'; fi;

          if [[ $((${arr[1]} - 12)) -le 170 && $((${arr[1]} - 12)) -ge 140 ]]; then echo '::set-output name=descLenGood::True'; else echo '::set-output name=desLenGood::False'; fi;
        id: script

      - name: Check for heading length
        run: |
          if [[ ${{ steps.script.outputs.titleResult }} == True && ${{ steps.script.outputs.titleLenGood }} == False ]] ;
          then exit 1; fi ;

      - name: Check for description length
        run: |
          if [ ${{ steps.script.outputs.desResult }} == True && ${{ steps.script.outputs.descLenGood }} == False ];
          then exit 1; fi ;
