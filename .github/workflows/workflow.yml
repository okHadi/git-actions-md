name: Extract and test MD File
on: [pull_request]
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TITLE_LINE:
  DESCRIPTION_LINE:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: get pr number
        run: echo GITHUB_PR_NUMBER=$(echo "$GITHUB_REF" | awk -F / '{print $3}')>> $GITHUB_ENV
        shell: bash

      - name: Check if .md file was updated in this Pull Request
        run: echo "GITHUB_MD_FILE_CHANGED=$(gh pr view $GITHUB_PR_NUMBER --json files --jq '.files.[].path' | grep -i '.md')" >> $GITHUB_ENV

      - name: test
        id: mdfile
        run: |
          echo $GITHUB_MD_FILE_CHANGED
          echo $GITHUB_PR_NUMBER
          echo ::set-output name=mdfile::$GITHUB_MD_FILE_CHANGED

      - name: Check if md file changed
        id: checkmd
        shell: bash
        run: |
          if [ "$GITHUB_MD_FILE_CHANGED" == "" ]; then
            echo ::set-output name=mdchanged::false
          else
            echo ::set-output name=mdchanged::true
          fi

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Python script to get line number of title and descrition
        if: ${{ steps.checkmd.outputs.mdchanged == true }}
        id: pythonscript
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os
            import subprocess
            env_file = os.getenv('GITHUB_ENV')
            df = open("${{ steps.mdfile.outputs.mdfile }}" )
            read = df.read()
            df.seek(0)
            read
            arr = []
            line = 1
            for word in read:
                if word == '\n':
                    line += 1
            for i in range(line):
                arr.append(df.readline())
            def findline(word):
                for i in range(len(arr)):
                    if word in arr[i]:
                        print(i+1)
                        return i+1
            with open(env_file, "a") as myfile:
              x = findline("title:")
              if x is None:
                myfile.write("TITLE_EXIST=False"+"\n")
              else:
                myfile.write(f"TITLE_LINE={x}"+"\n")
                myfile.write(f"TITLE_EXIST=True"+"\n")
              
            with open(env_file, "a") as myfile:
               y = findline("description:")
               if y is None:
                  myfile.write("DESCRIPTION_EXIST=False")
               else:
                myfile.write(f"DESCRIPTION_LINE={y}"+"\n")
                myfile.write(f"DESCRIPTION_EXIST=True")

      - name: Bash script
        if: ${{ steps.checkmd.outputs.mdchanged == true }}
        id: script
        run: |
          echo $TITLE_LINE;
          echo $TITLE_EXIST;
          echo $DESCRIPTION_LINE;
          echo $DESCRIPTION_EXIST;
          arr=();
          while IFS= read -r line; do arr+=(${#line}) ; done < $GITHUB_MD_FILE_CHANGED;
          if [[ $((${arr[$TITLE_LINE]} - 6)) -le 70 && $((${arr[$TITLE_LINE]} - 6)) -ge 50 ]]; then echo '::set-output name=titleLenGood::True'; else echo '::set-output name=titleLenGood::False'; fi;
          if [[ $((${arr[$DESCRIPTION_LINE]} - 12)) -le 170 && $((${arr[$DESCRIPTION_LINE]} - 12)) -ge 140 ]]; then echo '::set-output name=descLenGood::True'; else echo '::set-output name=descLenGood::False'; fi;

      - name: Check for heading length
        if: ${{ steps.checkmd.outputs.mdchanged == true }}
        run: |
          if [[ ${{ env.TITLE_EXIST }} == True && ${{ steps.script.outputs.titleLenGood }} == False ]] ;
          then exit 1; fi ;

      - name: Check for description length
        if: ${{ steps.checkmd.outputs.mdchanged == true }}
        run: |
          if [[ ${{ env.DESCRIPTION_EXIST }} == True && ${{ steps.script.outputs.descLenGood }} == False ]];
          then exit 1; fi ;
